{
  "language": "Solidity",
  "sources": {
    "contracts/authenticate.sol": {
      "content": "// SPDX-Licence-Identifier : MIT \npragma solidity ^0.8.8;\n\n// Contract Name - Certificate_Authentication\n// Functions implemented : \n// isCertificateExist - TO CHECK WHETHER CERTIFICATE EXISTS ON THE BLOCKCHAIN NETWORK\n// AddCertificate - TO ADD A CERTIFICATE TO BLOCKCHAIN NETWORK\n// get_details - TO RETRIEVE CERTIFICATE DETAILS \n// get_timestamp - TO RETRIEVE LATEST TIMESTAMP OF UPDATE OF A CERTIFICATE\n// DeleteCertificate - TO DELETE A CERTIFICATE \n// UpdateCertificate - TO UPDATE A CERTIFICATE (CERTIFICATE NUMBER REMAINS SAME)\n// Verify - COMPARING THE SUBMITTED CERTIFICATE DETAILS WITH THE ONE ON THE BLOCKCHAIN \n \ncontract Certificate_Authentication {\n    /*State Variables*/\n    mapping(uint256 => bytes32[5]) mp;\n    bytes32[5]  hashArray;\n    mapping(uint256 => uint256) lastUpdate;\n\n    /*Events*/\n    event transact(address indexed from , string method);\n\n   function isCertificateExist(uint256 _certNo) public view returns(bool) {           // is certificate already present\n        if(mp[_certNo][0] == 0x0000000000000000000000000000000000000000000000){\n            return false;\n        }\n        else{\n            return true;\n        }\n   }\n   \n    function AddCertificate (uint256 _certNo , bytes32 _name , bytes32 _fatherNm , bytes32 _rollNo , bytes32 _schoolCode , bytes32 _percentage ) public {\n        \n        if(isCertificateExist(_certNo)){\n            revert(\"Certificate already exists\");\n        }\n\n        hashArray[0]=(_name);                                                       // Adding the hash values of different fields (name,rollno,etc) to hashArray \n        hashArray[1]=(_fatherNm);\n        hashArray[2]=(_rollNo);\n        hashArray[3]=(_schoolCode);\n        hashArray[4]=(_percentage);\n\n        mp[_certNo]=hashArray;                                                       // mapping hashArray to the certificate number \n        emit transact(msg.sender , \"AddCertificate\");\n    }\n\n\n\n    function get_details(uint256 _certNo  ) public view returns(bytes32[5] memory){    // to retrieve the hash values of details \n        return mp[_certNo];\n    }\n\n\n    function get_timestamp(uint256 _certNo) public view returns(uint256) {\n        return lastUpdate[_certNo];\n    }\n\n\n    function DeleteCertificate (uint256 _certNo) public {                            // to delete a certificate\n       \n        if(isCertificateExist(_certNo)==false){\n            revert(\"Certificate does not exist\");\n        }\n        mp[_certNo][0] = 0x0000000000000000000000000000000000000000000000000000000000000000;\n        emit transact(msg.sender , \"DeleteCertificate\");\n    }\n\n\n    function UpdateCertificate (uint256 _certNo , bytes32 _name , bytes32 _fatherNm , bytes32 _rollNo , bytes32 _schoolCode , bytes32 _percentage) public {\n        if(isCertificateExist(_certNo)==false){\n            revert(\"Certificate does not exist\");\n        }\n        mp[_certNo][0]=_name;\n        mp[_certNo][1] == _fatherNm;\n        mp[_certNo][2] == _rollNo;\n        mp[_certNo][3] == _schoolCode;\n        mp[_certNo][4] == _percentage;\n\n        uint256 latest_update = block.timestamp;\n        lastUpdate[_certNo]=latest_update;\n        emit transact(msg.sender , \"UpdateCertificate\");\n    }\n\n\n    function verify(uint256 _certNo , bytes32 _name , bytes32 _fatherNm , bytes32 _rollNo , bytes32 _schoolCode , bytes32 _percentage) public view returns(bool) {\n        \n         \n        if((mp[_certNo][0] == _name) && (mp[_certNo][1] == _fatherNm) && (mp[_certNo][2] == _rollNo) && (mp[_certNo][3] == _schoolCode) && (mp[_certNo][4] == _percentage)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    \n}\n\n// 0x6f54d8ec7a61bdaf30d77aaeffd0b6532c908f0e41c1cf35b8151fed6e161bc9"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}